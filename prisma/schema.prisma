// -----------------------
// DATASOURCE & GENERATOR
// -----------------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -----------------------
// MODELS
// -----------------------

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  password      String?       // nullable for OAuth users
  phone         String?
  oauthProvider String?
  oauthId       String?
  role          Role          @default(user)

  // relations
  profile       Profile?
  kos           Kos[]         @relation("OwnerKos")
  comments      Comment[]
  books         Book[]
  Notification  Notification[]

  // timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Profile {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique

  photo             String?   // URL atau path ke foto profil
  fullName          String
  gender            Gender?
  birthDate         DateTime?
  occupation        String?   // pekerjaan
  institution       String?   // nama instansi/kampus/sekolah
  cityOrigin        String?   // kota asal
  status            String?   // contoh: mahasiswa, karyawan, freelancer, dll
  lastEducation     String?   // pendidikan terakhir
  emergencyContact  String?   // nomor kontak darurat (+62...)

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Kos {
  id             Int            @id @default(autoincrement())
  userId         Int
  name           String
  address        String
  description    String
  gender         Gender
  priceFrom      Int?
  priceTo        Int?
  rules          String[]

  owner          User           @relation("OwnerKos", fields: [userId], references: [id], onDelete: Cascade)
  rooms          KamarKos[]
  facilitiesUmum FasilitasUmum[]
  images         KosImage[]
  comments       Comment[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model KamarKos {
  id            Int             @id @default(autoincrement())
  kosId         Int
  name          String
  totalRooms    Int              @default(1)
  available     Int              @default(1)
  pricePerMonth Int

  kos           Kos              @relation(fields: [kosId], references: [id], onDelete: Cascade)
  images        KamarKosImage[]
  facilities    Fasilitas[]
  comments      Comment[]        @relation("KamarKosComments")
  books         Book[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FasilitasUmum {
  id        Int    @id @default(autoincrement())
  kosId     Int
  name      String

  kos       Kos    @relation(fields: [kosId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fasilitas {
  id          Int       @id @default(autoincrement())
  kamarKosId  Int
  name        String

  kamarKos    KamarKos  @relation(fields: [kamarKosId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model KosImage {
  id        Int    @id @default(autoincrement())
  kosId     Int
  file      String

  kos       Kos    @relation(fields: [kosId], references: [id], onDelete: Cascade)

  isMain    Boolean @default(false)
  createdAt DateTime @default(now())
}

model KamarKosImage {
  id          Int      @id @default(autoincrement())
  kamarKosId  Int
  file        String

  kamarKos    KamarKos @relation(fields: [kamarKosId], references: [id], onDelete: Cascade)

  isMain      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Comment {
  id         Int       @id @default(autoincrement())
  kosId      Int
  kamarKosId Int?
  userId     Int
  content    String
  reply      String?

  kos        Kos       @relation(fields: [kosId], references: [id], onDelete: Cascade)
  kamarKos   KamarKos? @relation("KamarKosComments", fields: [kamarKosId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Book {
  id          Int        @id @default(autoincrement())
  kamarKosId  Int
  userId      Int
  startDate   DateTime
  endDate     DateTime?
  totalPrice  Int?
  status      BookStatus @default(pending)
  note        String?

  kamarKos    KamarKos   @relation(fields: [kamarKosId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  message     String
  type        String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model File {
  id        String   @id @default(uuid())
  name      String
  url       String
  mimetype  String
  createdAt DateTime @default(now())
}

// -----------------------
// ENUMS
// -----------------------

enum Role {
  owner
  user
}

enum Gender {
  male
  female
  all
}

enum BookStatus {
  pending
  accept
  reject
}
